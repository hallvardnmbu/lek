<!DOCTYPE html>
<html>
<head>
    <title>lek</title>
    <link rel="stylesheet" href="/styles.css">

    <script>
    if (!sessionStorage.getItem('token')) {
        window.location.href = '/spotify';
    } else if (!sessionStorage.getItem('settings')) {
        window.location.href = '/settings';
    }
    </script>
    <script src="/scripts/spotify.js"></script>
    <script src="/scripts/authenticate.js"></script>
</head>
<body>
    <span id="star"></span>
    <script>
        const star = {
          object: document.getElementById('star'),
          frame: 1,
          frames: 10
        };

        function updateStar() {
            star.object.innerHTML = `<img src="/icons/animations/star/Star (${star.frame} of ${star.frames}).ico">`;
            star.frame = star.frame >= star.frames ? 1 : star.frame + 1;
        }

        updateStar();
        setInterval(updateStar, 200);
    </script>

    <br>

    <section>
        <span>lek</span>
        <div id="game-mode">yo-yo</div>
        <div id="game-description">yo</div>
    </section>

    <section>
        <span>hva skjer?</span>
        <div id="game-information">yo</div>
    </section>

    <section>
        <span>for kontrollfreaker:</span>

        <button id="pause-game" onclick="pauseGame()">pause!</button>
        <button id="resume-game" onclick="resumeGame()">ferdig hvilt!</button>
        <button id="skip-mode" onclick="skipCurrentMode()">kje de lig !!! hopp over</button>
        <button id="continue-button" onclick="continueGame()" style="display: none;">fortsett NÅ!</button>
    </section>

    <footer>
        <span id="explosion" style="height: calc(4 * var(--fontsize));"></span>
        <button id="explode" onclick="playExplosion()">Pang.</button>
        <script>
            let explosion = {
              object: document.getElementById('explosion'),
              frame: 1,
              frames: 3,
              playing: false,
              interval: null
            };

            function playExplosion() {
                if (explosion.playing) return;

                explosion.playing = true;
                explosion.frame = 1;

                explosion.interval = setInterval(() => {
                    if (explosion.frame <= explosion.frames) {
                        explosion.object.innerHTML = `<img src="/icons/animations/explosion/Explosion (${explosion.frame} of ${explosion.frames}).ico">`;
                    } else {
                        clearInterval(explosion.interval);
                        explosion.playing = false;
                        explosion.object.innerHTML = "";
                    }

                    explosion.frame++;
                }, 200);
            }
        </script>

        <hr>

        <span>
            For å styre sangen som spilles kan du
            <button onclick="pauseSong()">pause</button> den,
            <button onclick="playSong()">starte</button> den igjen eller
            <button onclick="skipSong()">hoppe over</button> den.
        </span>

        <span>
            Du kan også endre lydnivået ved å dra på
            <input type="range" id="volumeSlider" min="0" max="100" value="50" onchange="updateVolume(this.value)" />, eller endre tidsintervall ved å dra på
            <input type="range" id="delaySlider" min="1" max="8" value="2" onchange="updateDelay(this.value)" />. Jeg velger å ikke vise deg verdiene. Du får prøve deg litt frem.
        </span>

        <hr>

        <span>
            Hallo! Jeg er dum og har gjort noe feil. Send meg tilbake til
            <a href="/settings">innstillinger</a>
            for å fikse det. Eller vil du kanskje helt tilbake til
            <a href="/spotify">spotify-innlogging</a>?
            Nåja. For noe styr.
        </span>
    </footer>

    <script src="/scripts/game.js"></script>

    <script>
        // Game control functions
        let gameInstance = null;
        // Removed local waitingForClick variable, gameInstance.waitingForClick is the source of truth.

        function resolvePromiseAndCleanup(gameInst) {
            if (gameInst && gameInst.currentClickPromiseResolve) {
                gameInst.currentClickPromiseResolve();
            }
            if (gameInst) {
                gameInst.waitingForClick = false; // Critical: update the game instance's state
                gameInst.currentClickPromiseResolve = null;
                gameInst.currentClickPromiseReject = null;
            }

            const gameInfo = document.getElementById('game-information');
            if (gameInfo) {
                gameInfo.classList.remove('waiting-for-click');
                const indicator = gameInfo.querySelector('.click-indicator');
                if (indicator) indicator.remove();
            }
            const continueButton = document.getElementById('continue-button');
            if (continueButton) {
                continueButton.style.display = 'none';
            }
            // Remove the global click handler after it's done its job or if the promise is resolved/rejected externally
            document.removeEventListener('click', globalClickHandler);
        }

        function rejectPromiseAndCleanup(gameInst, reason) {
            if (gameInst && gameInst.currentClickPromiseReject) {
                gameInst.currentClickPromiseReject(reason);
            }
            if (gameInst) {
                gameInst.waitingForClick = false; // Critical: update the game instance's state
                gameInst.currentClickPromiseResolve = null;
                gameInst.currentClickPromiseReject = null;
            }

            const gameInfo = document.getElementById('game-information');
            if (gameInfo) {
                gameInfo.classList.remove('waiting-for-click');
                const indicator = gameInfo.querySelector('.click-indicator');
                if (indicator) indicator.remove();
            }
            const continueButton = document.getElementById('continue-button');
            if (continueButton) {
                continueButton.style.display = 'none';
            }
            document.removeEventListener('click', globalClickHandler);
        }

        // Define globalClickHandler once to be able to remove it.
        let globalClickHandler;

        window.waitForClick = function(message, gameInst) {
            return new Promise((resolve, reject) => {
                if (!gameInst) {
                    console.error("waitForClick called without gameInstance!");
                    reject(new Error("waitForClick called without gameInstance!"));
                    return;
                }

                // gameInst.waitingForClick should already be true, set by game.js's _waitForClick
                // but we ensure it here if this function were ever called directly for some reason.
                gameInst.waitingForClick = true;
                gameInst.currentClickPromiseResolve = resolve;
                gameInst.currentClickPromiseReject = reject;

                const gameInfo = document.getElementById('game-information');
                updateInformation(message + "\n\ntrykk (hvor som helst?) for å fortsette...");

                gameInfo.classList.add('waiting-for-click');
                // Ensure not to duplicate indicators if function is somehow called multiple times
                if (!gameInfo.querySelector('.click-indicator')) {
                    gameInfo.innerHTML += '<div class="click-indicator">trykk</div>';
                }

                const continueButton = document.getElementById('continue-button');
                if (continueButton) {
                    continueButton.style.display = 'block';
                }

                // Assign to globalClickHandler so it can be removed by name
                globalClickHandler = (e) => {
                    // Check if the click target is NOT a button or an input element
                    // and that the game is actually waiting for a click from this mechanism
                    if (gameInst.waitingForClick && !e.target.closest('button#pause-game') && !e.target.closest('button#skip-mode') && !e.target.closest('button#resume-game') && !e.target.closest('input[type="range"]')) {
                        // If continue button is explicitly clicked, it will call continueGame(), which calls resolvePromiseAndCleanup.
                        // This handler is for general clicks on the page.
                        if (e.target.closest('button#continue-button')) return;

                        resolvePromiseAndCleanup(gameInst);
                        // No document.removeEventListener here, resolvePromiseAndCleanup handles it.
                    }
                };
                document.addEventListener('click', globalClickHandler);
            });
        };

        function pauseGame() {
            if (gameInstance) {
                if (gameInstance.waitingForClick && gameInstance.isCurrentlyWaiting) { // isCurrentlyWaiting ensures _waitForClick is on stack
                    rejectPromiseAndCleanup(gameInstance, new Error('Game paused'));
                }
                // Proceed with pausing the game logic even if it wasn't waiting for a click
                gameInstance.isRunning = false;
                updateGameMode("du har pauset. tulling", "for å fortsette igjen må du selvfølgelig trykke på knappen under selv. idiot.");
                document.getElementById('pause-game').disabled = true;
                document.getElementById('resume-game').disabled = false;
            }
        }

        function resumeGame() {
            if (gameInstance && !gameInstance.isRunning) {
                gameInstance.isRunning = true;
                // If the game was paused while waiting for a click, the promise was rejected.
                // _gameLoop should handle restarting appropriately.
                // If it was paused NOT during a wait, then _gameLoop continues.
                gameInstance._gameLoop(); // This will create a new game loop if one isn't active.
                updateGameMode("Spillet fortsetter", "Gjør deg klar!"); // Provide some feedback
                document.getElementById('pause-game').disabled = false;
                document.getElementById('resume-game').disabled = true;
            }
        }

        function skipCurrentMode() {
            if (gameInstance) {
                // Set the skipRequested flag on the game instance.
                // This will be checked by _interruptibleSleep and the game loop.
                gameInstance.skipRequested = true;

                updateGameMode("Skipping Mode", "One moment...");

                // If the game is currently waiting for a click (i.e., _waitForClick is active),
                // reject the promise to interrupt it immediately.
                if (gameInstance.waitingForClick && gameInstance.isCurrentlyWaiting) {
                    rejectPromiseAndCleanup(gameInstance, new Error('Mode skipped'));
                }

                // If not waiting for a click, the game loop or current game mode's
                // _interruptibleSleep will pick up the skipRequested flag.
                // No need to call gameInstance._gameLoop() or other methods here,
                // as the existing game loop will handle the skip.
            }
        }

        function continueGame() {
            // This function is now primarily for the "Fortsett NÅ!" button.
            // It directly resolves the promise if gameInstance is waiting.
            if (gameInstance && gameInstance.waitingForClick) {
                // gameInstance.waitingForClick will be set to true by _waitForClick in game.js
                // resolvePromiseAndCleanup will set it to false.
                resolvePromiseAndCleanup(gameInstance);
                updateInformation("fortsetter igjen"); // This might be overwritten by game.js quickly
            }
        }

        // Initialize sliders and store game instance globally for controls
        window.addEventListener('load', () => {
            // Initialize slider values from sessionStorage
            const savedDelay = sessionStorage.getItem("delay") || "2";
            document.getElementById('delaySlider').value = savedDelay;

            // Initialize volume slider
            const volumeSlider = document.getElementById('volumeSlider');
            volumeSlider.value = 50; // Default volume

            // Try to get the game instance after it's created
            if (window.game) {
                gameInstance = window.game;
            } else {
                console.warn("gameInstance not immediately available on load. Retrying in 1s.");
                setTimeout(() => {
                    if (window.game) {
                        gameInstance = window.game;
                    } else {
                        console.error("Failed to initialize gameInstance. Game controls may not work.");
                    }
                }, 1000);
            }
        });
    </script>
</body>
</html>
