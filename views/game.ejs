<!DOCTYPE html>
<html>
<head>
    <title>lek</title>
    <link rel="stylesheet" href="/styles.css">

    <script>
    if (!sessionStorage.getItem('token')) {
        window.location.href = '/spotify';
    } else if (!sessionStorage.getItem('settings')) {
        window.location.href = '/settings';
    }
    </script>
    <script src="/scripts/spotify.js"></script>
    <script src="/scripts/authenticate.js"></script>
</head>
<body>
    <span id="star"></span>
    <script>
        const star = {
          object: document.getElementById('star'),
          frame: 1,
          frames: 10
        };

        function updateStar() {
            star.object.innerHTML = `<img src="/icons/animations/star/Star (${star.frame} of ${star.frames}).ico">`;
            star.frame = star.frame >= star.frames ? 1 : star.frame + 1;
        }

        updateStar();
        setInterval(updateStar, 200);
    </script>

    <br>

    <section>
        <span>lek</span>
        <div id="game-mode">yo-yo</div>
        <div id="game-description">yo</div>
    </section>

    <section>
        <span>hva skjer?</span>
        <div id="game-information">yo</div>
    </section>

    <section>
        <span>for kontrollfreaker:</span>

        <button id="pause-game" onclick="pauseGame()">pause!</button>
        <button id="resume-game" onclick="resumeGame()">ferdig hvilt!</button>
        <button id="skip-mode" onclick="skipCurrentMode()">kje de lig !!! hopp over</button>
        <button id="continue-button" onclick="continueGame()" style="display: none;">fortsett NÅ!</button>
    </section>

    <footer>
        <span id="explosion" style="height: calc(4 * var(--fontsize));"></span>
        <button id="explode" onclick="playExplosion()">Pang.</button>
        <script>
            let explosion = {
              object: document.getElementById('explosion'),
              frame: 1,
              frames: 3,
              playing: false,
              interval: null
            };

            function playExplosion() {
                if (explosion.playing) return;

                explosion.playing = true;
                explosion.frame = 1;

                explosion.interval = setInterval(() => {
                    if (explosion.frame <= explosion.frames) {
                        explosion.object.innerHTML = `<img src="/icons/animations/explosion/Explosion (${explosion.frame} of ${explosion.frames}).ico">`;
                    } else {
                        clearInterval(explosion.interval);
                        explosion.playing = false;
                        explosion.object.innerHTML = "";
                    }

                    explosion.frame++;
                }, 200);
            }
        </script>

        <hr>

        <span>
            For å styre sangen som spilles kan du
            <button onclick="pauseSong()">pause</button> den,
            <button onclick="playSong()">starte</button> den igjen eller
            <button onclick="skipSong()">hoppe over</button> den.
        </span>

        <span>
            Du kan også endre lydnivået ved å dra på
            <input type="range" id="volumeSlider" min="0" max="100" value="50" onchange="updateVolume(this.value)" />, eller endre tidsintervall ved å dra på
            <input type="range" id="delaySlider" min="1" max="8" value="2" onchange="updateDelay(this.value)" />. Jeg velger å ikke vise deg verdiene. Du får prøve deg litt frem.
        </span>

        <hr>

        <span>
            Hallo! Jeg er dum og har gjort noe feil. Send meg tilbake til
            <a href="/settings">innstillinger</a>
            for å fikse det. Eller vil du kanskje helt tilbake til
            <a href="/spotify">spotify-innlogging</a>?
            Nåja. For noe styr.
        </span>
    </footer>

    <script src="/scripts/game.js"></script>

    <script>
        // Game control functions
        let gameInstance = null; // This will be assigned in window.onload
        let localWaitingForClickFlag = false; // Renamed to avoid conflict

        function pauseGame() {
            if (gameInstance && gameInstance.isRunning) {
                gameInstance.isRunning = false;
                updateGameMode("du har pauset. tulling", "for å fortsette igjen må du selvfølgelig trykke på knappen under selv. idiot.");
                document.getElementById('pause-game').disabled = true;
                document.getElementById('resume-game').disabled = false;
            }
        }

        function resumeGame() {
            if (gameInstance && !gameInstance.isRunning) {
                gameInstance.isRunning = true;
                gameInstance._gameLoop();
                document.getElementById('pause-game').disabled = false;
                document.getElementById('resume-game').disabled = true;
            }
        }

        function skipCurrentMode() {
            if (gameInstance && gameInstance.currentMode) {
                updateGameMode("hopper over", "... ... ...");
                // The game loop will naturally move to the next mode
            }
        }

        async function continueGame() { // Made async
            if (speechSynthesis && speechSynthesis.speaking && gameInstance && typeof gameInstance.isSpeaking !== 'undefined') {
                speechSynthesis.cancel();
                gameInstance.isSpeaking = false;
                console.log("Speech cancelled by continueGame");
            }
            if (localWaitingForClickFlag && gameInstance && gameInstance.waitingForClick) {
                gameInstance.waitingForClick = false;
                localWaitingForClickFlag = false;
                const continueButton = document.getElementById('continue-button');
                if (continueButton) continueButton.style.display = 'none';
                // updateInformation is already async and will be awaited if called directly
                // For now, the original logic of just setting flags is maintained,
                // game loop / waitForClick resolve will handle UI updates.
                // If specific message needed here: await updateInformation("fortsetter igjen");
            }
        }

        // Initialize sliders and store game instance globally for controls
        window.addEventListener('load', () => {
            // Assign the global game instance created in game.js
            if (window.game) {
                gameInstance = window.game;
            } else {
                // Fallback if game.js loads slower, though initializeGame in game.js should handle this.
                setTimeout(() => {
                    if (window.game) gameInstance = window.game;
                    else console.error("Game instance not found after load and timeout.");
                }, 1000);
            }

            // Initialize slider values from sessionStorage
            const savedDelay = sessionStorage.getItem("delay") || "2";
            document.getElementById('delaySlider').value = savedDelay;

            // Initialize volume slider
            const volumeSlider = document.getElementById('volumeSlider');
            volumeSlider.value = 50; // Default volume
        });

        // Global function to wait for click
        window.waitForClick = async function(message) { // Made async
            return new Promise(async (resolve) => { // Promise callback made async
                localWaitingForClickFlag = true;
                if (gameInstance) gameInstance.waitingForClick = true;

                const gameInfo = document.getElementById('game-information');
                // updateInformation is already async and handles its own speech.
                // The message here is the primary instruction.
                // The "click to continue" part is usually not spoken due to filters in updateInformation.
                await updateInformation(message + "\n\ntrykk (hvor som helst?) for å fortsette...");
                // No need to call gameInstance.speak here directly as updateInformation does it.

                // Add visual feedback
                gameInfo.classList.add('waiting-for-click');
                // Ensure the "click to continue" message is visible if not spoken
                if (!gameInfo.innerHTML.includes("trykk (hvor som helst?) for å fortsette...")) {
                    gameInfo.innerHTML = gameInfo.innerHTML.replace(/<br>\s*<br>$/, '') + "<br><br>trykk (hvor som helst?) for å fortsette...";
                }
                if (!gameInfo.querySelector('.click-indicator')) {
                    gameInfo.innerHTML += '<div class="click-indicator">trykk</div>';
                }


                const continueButton = document.getElementById('continue-button');
                if (continueButton) {
                    continueButton.style.display = 'block';
                }

                const clickHandler = (e) => {
                    // Check if the click is on the continue button OR anywhere else not a button/input
                    const isContinueButton = e.target.id === 'continue-button';
                    const isGeneralClick = !e.target.closest('button:not(#continue-button)') && !e.target.closest('input');

                    if (isContinueButton || isGeneralClick) {
                        if (speechSynthesis && speechSynthesis.speaking && gameInstance && typeof gameInstance.isSpeaking !== 'undefined') {
                            speechSynthesis.cancel();
                            gameInstance.isSpeaking = false;
                            console.log("Speech cancelled by clickHandler");
                        }
                        localWaitingForClickFlag = false;
                        if (gameInstance) gameInstance.waitingForClick = false;
                        document.removeEventListener('click', clickHandler);
                        if (continueButton) continueButton.removeEventListener('click', clickHandler); // Also remove if attached to button

                        // Remove visual feedback
                        gameInfo.classList.remove('waiting-for-click');
                        const indicator = gameInfo.querySelector('.click-indicator');
                        if (indicator) indicator.remove();

                        if (continueButton) continueButton.style.display = 'none';
                        resolve();
                    }
                };

                document.addEventListener('click', clickHandler);
                // Ensure continue button also triggers the same logic if clicked directly
                if (continueButton) continueButton.addEventListener('click', clickHandler);
            });
        };
    </script>
</body>
</html>
